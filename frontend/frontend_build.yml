stages:
  - build
  - test
  - release
  - deploy
#  - notify

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

include:
  - project: 'templates/ci'
    file: 'DockerInDockerTemplate.yml'
  - template: Security/SAST.gitlab-ci.yml

build-frontend:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$(echo -n $CI_DEPENDENCY_PROXY_SERVER | awk -F[:] '{print $1}')\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache=true
      --cache-repo $CI_REGISTRY_IMAGE
      --no-push
      --build-arg VERSION=$VERSION
      --context "frontend/"
      --dockerfile "frontend/Dockerfile"
      --destination "$CI_REGISTRY_IMAGE/sausage-frontend:$CI_COMMIT_SHA"
 
sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  script:
    - cd frontend
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey="${SONAR_FRONTEND_KEY}"
      -Dsonar.sources=.
      -Dsonar.host.url="${SONAR_URL}"
      -Dsonar.login="${SONAR_FRONTEND_TOKEN}"
      -Dsonar.projectName="${SONAR_FRONTEND_NAME}"

eslint-sast:
  stage: test

nodejs-scan-sast:
  stage: test

semgrep-sast:
  stage: test

spotbugs-sast:
  stage: test
  rules:
    - when: never

upload-frontend-latest:
  stage: release
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$(echo -n $CI_DEPENDENCY_PROXY_SERVER | awk -F[:] '{print $1}')\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/config.json
    - /kaniko/executor
      --cache=true
      --cache-repo $CI_REGISTRY_IMAGE
      --build-arg VERSION="$VERSION"
      --context "frontend/"
      --dockerfile "frontend/Dockerfile"
      --destination "$CI_REGISTRY_IMAGE/sausage-frontend:latest"

#telegram-notification-frontend:
#  stage: notify
#  script:
          # - if [[ $CI_COMMIT_MESSAGE == *"send notification"* ]]; then curl -X POST -H 'Content-type:application/json' --data '{"chat_id":"-1001657575944", "text":"Anatoliy Yudaev built the frontend.\nArtefacts downoad link for frontend - '${CI_PROJECT_URL}'/-/jobs/'$job_id'/artifacts/download?job=build-frontend-code-job"}' https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage; fi
#    - if [[ $CI_COMMIT_MESSAGE == *"send notification"* ]]; then curl -X POST -H 'Content-type:application/json' --data '{"chat_id":"-1001657575944", "text":"Вышла новая версия Frontend сосисочной - '${VERSION}'.\nСкачать можно по ссылке - '${NEXUS_FRONTEND_DOWNLOAD_ART}'."}' https://api.telegram.org/bot5933756043:AAE8JLL5KIzgrNBeTP5e-1bkbJy4YRoeGjs/sendMessage; fi
#  needs:
#    - deploy-frontend

deploy-frontend:
  stage: deploy
  image: alpine:3.15.0
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "CI_REGISTRY=${CI_REGISTRY}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
      /bin/bash -s " < ./frontend/frontend_docker_deploy.sh
