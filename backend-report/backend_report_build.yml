include:
  - template: Security/SAST.gitlab-ci.yml

stages:
  - build
  - test
  - release
  - deploy

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}
  DOCKER_TLS_VERIFY: "false"

build-backend-report:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - echo SPRING_DATASOURCE_URL=${PSQL_URL} >> backend-report/.env
    - echo SPRING_DATASOURCE_USERNAME=${PSQL_USERNAME} >> backend-report/.env
    - echo SPRING_DATASOURCE_PASSWORD=${PSQL_PASSWORD} >> backend-report/.env
    - echo SPRING_DATA_MONGODB_URI=${MONGODB_URI} >> backend-report/.env
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$(echo -n $CI_DEPENDENCY_PROXY_SERVER | awk -F[:] '{print $1}')\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/confi                       g.json
    - /kaniko/executor
      --cache=true
      --cache-repo $CI_REGISTRY_IMAGE
      --no-push
      --build-arg VERSION=$VERSION
      --context "backend-report/"
      --dockerfile "backend-report/Dockerfile"
      --destination "$CI_REGISTRY_IMAGE/sausage-backend-report:$CI_COMMIT_SHA"
  artifacts:
    paths:
      - backend-report/.env

build-backend-report-test:
  stage: build
  image: python:3.6
  script:
    - cd backend-report/app
    - pip install -r requirements.txt

sonarqube-backend-report-sast:
  stage: test
  image: 
    name: sonarsource/sonar-scanner-cli:latest
    entrypoint: [""]
  script:
    - cd backend-report
    - >
      sonar-scanner -Dsonar.qualitygate.wait=true
      -Dsonar.projectKey="${SONAR_BACKEND_REPORT_KEY}"
      -Dsonar.sources=.
      -Dsonar.host.url="${SONAR_URL}"
      -Dsonar.login="${SONAR_BACKEND_REPORT_TOKEN}"
      -Dsonar.projectName="${SONAR_BACKEND_REPORT_NAME}"

bandit-sast:
  stage: test

semgrep-sast:
  stage: test

spotbugs-sast:
  stage: test
  rules:
    - when: never

nodejs-scan-sast:
  stage: test
  rules:
    - when: never

eslint-sast:
  stage: test
  rules:
    - when: never

upload-backend-report-latest:
  stage: release
  image:
    name: gcr.io/kaniko-project/executor:v1.14.0-debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "{\"auths\":{\"${CI_REGISTRY}\":{\"auth\":\"$(printf "%s:%s" "${CI_REGISTRY_USER}" "${CI_REGISTRY_PASSWORD}" | base64 | tr -d '\n')\"},\"$(echo -n $CI_DEPENDENCY_PROXY_SERVER | awk -F[:] '{print $1}')\":{\"auth\":\"$(printf "%s:%s" ${CI_DEPENDENCY_PROXY_USER} "${CI_DEPENDENCY_PROXY_PASSWORD}" | base64 | tr -d '\n')\"}}}" > /kaniko/.docker/confi                       g.json
    - /kaniko/executor
      --cache=true
      --cache-repo $CI_REGISTRY_IMAGE
      --build-arg VERSION="$VERSION"
      --context "backend-report/"
      --dockerfile "backend-report/Dockerfile"
      --destination "$CI_REGISTRY_IMAGE/sausage-backend-report:latest"

deploy-backend-report:
  stage: deploy
  image: vault:1.11.3
  needs:
    - build-backend-report
    - upload-backend-report-latest
  dependencies:
    - build-backend-report
  before_script:
    - apk add openssh-client bash
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - scp docker-compose.yml ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/docker-compose.yml
    - scp ./backend-report/.env ${DEV_USER}@${DEV_HOST}:/home/${DEV_USER}/.env
#    - export VAULT_TOKEN="$(vault write -field=token auth/jwt/login role=sausage-store jwt=$CI_JOB_JWT)"
    - ssh ${DEV_USER}@${DEV_HOST}
      "export "VERSION=${VERSION}";
       export "CI_REGISTRY=${CI_REGISTRY}";
       export "CI_REGISTRY_USER=${CI_REGISTRY_USER}";
       export "CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}";
       export "CI_REGISTRY_IMAGE=${CI_REGISTRY_IMAGE}";
      /bin/bash -s " < ./backend-report/report_docker_deploy.sh
#       export "SPRING_DATASOURCE_PASSWORD=$(vault kv get -field=spring.datasource.password secret/sausage-store)";
#       export "SPRING_DATASOURCE_USERNAME=$(vault kv get -field=spring.datasource.username secret/sausage-store)";
#       export "SPRING_DATASOURCE_URL=$(vault kv get -field=spring.datasource.url secret/sausage-store)";
#       export "SPRING_DATA_MONGODB_URI=$(vault kv get -field=spring.data.mongodb.uri secret/sausage-store)";
#       export "SPRING_DATASOURCE_DRIVER_CLASS_NAME=$(vault kv get -field=spring.datasource.driver-class-name secret/sausage-store)";

